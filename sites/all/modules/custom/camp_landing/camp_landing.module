<?php
//drush dis camp_landing -y; drush pm-uninstall camp_landing -y; drush en camp_landing -y;
/*
 * todo: admin page to select default campaign in case of no source match
 *
 */
function camp_landing_permission() {
    return array(
        'access camp_landing' => array(
            'title' => t('Access Campaign Landing'),
            'description' => t('Basic access to campaign landing forms'),
            'restrict access' => FALSE,
        ),
        'administer camp_landing' => array(
            'title' => t('Access Campaign Landing'),
            'description' => t('Administer Campaigns'),
        ),
    );
}

/**
 * Implementation of hook_menu()
 */

function camp_landing_menu(){
    $items['admin/config/camp_landing'] = array(
        'title' => 'Landing page control',
        'page callback' => 'drupal_get_form',
        'access arguments' => array('access camp_landing'),
        'page arguments' => array('camp_landing_settings'),
        'access arguments' => array('administer camp_landing'),
    );
    $items['camp_landing/track'] = array(
        'title' => 'Track Users',
        'page callback' => 'camp_landing_track',
        'access arguments' => array('access content'),
    );

    return $items;
}

function camp_get_term_from_tid($tid){
    $query = db_select('taxonomy_term_data', 'ttd');
    $query->fields('ttd', array('name',));
    $query->condition('tid', $tid);
    return $query->execute()->fetch()->name;
}
/*
 * Implementation of hook_block_info()
 */

function camp_landing_block_info(){
        
    $blocks['homepage_camp_img'] = array(
        'info' => t('Campaign Landing- Home'),
        'visibility' => BLOCK_VISIBILITY_LISTED,
        'pages' => '<front>',
        'region' => 'sidebar_first',
        'cache' => DRUPAL_NO_CACHE,
        );
    
        $blocks['homepage_offer_sidebar'] = array(
        'info' => t('Campaign Offer- Home Sidebar'),
        'visibility' => BLOCK_VISIBILITY_LISTED,
        'pages' => '<front>',
        'region' => 'sidebar_first',
        'cache' => DRUPAL_NO_CACHE,
        );
        
        $query = db_select('node', 'n');
        $query->fields('n', array('title', 'nid'));
        $query->condition('type', 'campaign_promo');
        $result = $query->execute();
        foreach($result as $key=>$value){
            $blocks['campaign_promo_' . $value->nid] = array(
            'info' => t('Promo Block- ' . $value->title),
            'visibility' => BLOCK_VISIBILITY_LISTED,
            'region' => 'sidebar_first',
            'cache' => DRUPAL_NO_CACHE,
            );
        }
    $blocks['homepage_main'] = array(
        'info' => t('Homepage form & promo'),
        'visibility' => BLOCK_VISIBILITY_LISTED,
        'pages' => '<front>',
        'region' => 'content',
        'cache' => DRUPAL_NO_CACHE,
        );
    return $blocks;
}

/**
 * Implements hook_block_view().
 */

function camp_landing_block_view($delta = '') {
    $block = '';
    if($delta == 'homepage_main'){
        $campaign = campaign_landing_choose_campaign();
        $campaign_node = node_load($campaign);
        if(!empty($campaign_node->field_campaign_promo_main)){
            $promo_nid = $campaign_node->field_campaign_promo_main['und'][0]['target_id'];
            $promo_node_view = node_view(node_load($promo_nid), 'full');
            $block['content'][] = $promo_node_view;
        }
        $campaign_node_view = node_view($campaign_node, 'full');
        $block['content'][] = $campaign_node_view;

    }
    if($delta == 'homepage_camp_img'){
        $campaign = campaign_landing_choose_campaign();
        if($campaign != false){
            $node = node_load($campaign);
            if($node){
                $alias = drupal_get_path_alias('node/' . $node->nid);
                $promo = '<a href="./'.$alias.'">' . theme('image_style', array('path' => $node->field_camp_img_1[$node->language][0]['uri'], 'style_name' => 'medium')) . '</a>';
                $block['content'] = $promo;
            }

        }
    }
    if(is_numeric(strpos($delta, 'campaign_promo_'))){
        $nid = substr($delta, 15);
        $node = node_load($nid);
        if($node){
            $promo = '<img src="' . render(file_create_url($node->field_camppromo_img_1['und'][0]['uri'])) . '"/>';
            $block['content'] = $promo;
        }
    }
    if($delta == 'homepage_offer_sidebar'){
        $campaign = campaign_landing_choose_campaign();
        if($campaign != false){
            $campaign_node = node_load($campaign);
            if($campaign_node){
                if(!empty($campaign_node->field_offer_link)){
                                $offer_nid = $campaign_node->field_offer_link['und'][0]['target_id'];
            $offer_node = node_load($offer_nid);
            $offer_img_uri = $offer_node->field_campoffer_img_1['und'][0]['uri'];
            $alias = drupal_get_path_alias('node/' . $offer_node->nid);
            $offer = '<a href="./'.$alias.'">' . theme('image_style', array('path' => $offer_img_uri, 'style_name' => 'medium')) . '</a>';
            $block['content'] = $offer;
                }

            }

        }
    }
    return $block;
}

/**
 * Administration settings form.
 *
 * @see system_settings_form()
 */
function camp_landing_settings() {
    global $base_url;
    $query = db_select('node', 'n');
    $query->fields('n', array('title', 'nid'));
    $query->condition('type', 'campaign');
    $result = $query->execute();
    foreach($result as $key=>$value){
        $options[$value->nid] = $value->title . ' ' . l('view >', $base_url . '/node/' . $value->nid, array('attributes' => array('target' => '_blank')));
    }
    if(!empty($options)){
        $form['camp_default'] = array(
            '#default_value' => variable_get('camp_default'),
            '#type' => 'radios',
            '#options' => $options,
            '#title' => t('Choose Default Campaign'),
            '#description' => t('This default campaign will be used if there are no matches when checking the source.'),
        );
        return system_settings_form($form, FALSE);
    }else{
        $form['camp_default'] = array(
            '#markup' => t('You must first <a href="/node/add/campaign">create a campaign</a>'),
        );
        return $form;
    }
}
function camp_landing_track(){
    $output = '';
    return null;
}

function _camp_types(){
    $vid = taxonomy_get_vid_from_machine_name('campaign_types');
    $tree = taxonomy_get_tree($vid);
    $options = array();
    foreach($tree as $key=>$value){
        $options[$value->name] = strtolower($value->name);
    }
    //$options = array('Unknown'=>'unknown', 'Commercial'=>'commercial', 'Home'=>'home', 'Pro'=>'pro',);
    return $options;
}

/*
 * Implementation of hook_init().
 */

function camp_landing_init(){
    campaign_landing_choose_campaign();
    //debug('referrer: ' . $_SERVER['HTTP_REFERER']);
    drupal_add_js(drupal_get_path('module', 'camp_landing') . '/js/campaign_src_sniffer.js');
    drupal_add_js(drupal_get_path('module', 'camp_landing') . '/js/jquery-cookie/jquery.cookie.js');
    drupal_add_js(drupal_get_path('module', 'camp_landing') . '/js/campaign_landing.js');
}

function create_campaign_cookie(){
    
}

function get_campaign_phone($campaign){
            $query = db_select('field_data_field_camp_phone', 'phone');
            $query->fields('phone', array('field_camp_phone_value'));
            $query->condition('entity_id', $campaign);
            return $query->execute()->fetch()->field_camp_phone_value;
}

/*
 * @func determine the campaign to show in the home page block
 * @return false if no match, entity_id of campaign if match
 */

function campaign_landing_choose_campaign(){
    //has nexersystv_campaign cookie set?
    if(isset($_COOKIE['nexersystv_campaign'])){
        $nexersystv_cookie = json_decode($_COOKIE['nexersystv_campaign']);
        debug($nexersystv_cookie);
        $campaign = $nexersystv_cookie->campaign_nid;
    }elseif(!empty($_GET['nexid'])){
        if(is_numeric($_GET['nexid'])){
            $campaign = $_GET['nexid'];
        }else{
            $campaign = variable_get('camp_default');
        }
        $campaign_phone = get_campaign_phone($campaign);
        $campaign_array = array('campaign_nid' => $campaign, 'campaign_phone' => $campaign_phone);
        setcookie('nexersystv_campaign', json_encode($campaign_array), time() + (3600 * 12), '/');
    }else{
        $source_match = false;
        $campaign = variable_get('camp_default');
        $sources = array();
        $referrer = $_SERVER['HTTP_REFERER'];
        if(substr($referrer, -1) == '/'){
            $referrer = substr($referrer, 0, -1);
        }
        $query = db_select('field_data_field_camp_src', 'src');
        $query->fields('src', array('field_camp_src_value', 'entity_id'));
        $result = $query->execute();
        foreach($result as $key=>$value){
            $sources[] = array('src' => $value->field_camp_src_value, 'entity_id' => $value->entity_id);
        }
        foreach($sources as $srcKey=>$srcVal){
            if($srcVal['src'] == $referrer){
                $source_match = true;
                $campaign = $srcVal['entity_id'];
            }
        }
        if($campaign){
            $campaign_phone = get_campaign_phone($campaign);
        }
        
        
        $campaign_array = array(
            'campaign_nid' => $campaign, 
            'campaign_phone' => $campaign_phone,
            'campaign_params' => camp_landing_camp_url_params($campaign),
            );
        setcookie('nexersystv_campaign', json_encode($campaign_array), time() + (3600 * 12), '/');
    }
   
    return $campaign;
}

function camp_landing_camp_url_params($campaign_nid){
    $node = node_load($campaign_nid);
        //debug($node);
        $utm_media = '&utm_media=' . urlencode($node->field_camp_media['und'][0]['value']);
        $utm_src = '&utm_src=' . urlencode($node->field_camp_src['und'][0]['value']);
        debug($utm_src);
        $utm_content = '&utm_content=' . urlencode($node->field_camp_offer_txt['und'][0]['value']);
        $utm_term = '&utm_term=' . urlencode($node->field_camp_term['und'][0]['value']);
        $nexid = '&nexid=' . $campaign_nid;
        $params = $utm_media . $utm_src . $utm_content . $utm_term . $nexid;
        return $params;
}
/**
 * Implements hook_theme().
 */

function camp_landing_theme() {
    $theme = array(
        'camp_landing_view' => array(
            'render element' => 'camp_landing',
            //'path' => drupal_get_path('module', 'camp_landing') . '/templates',
            //'variables' => array('form' => NULL,),
        ),
    );
    return $theme;
}

/*
 * Implementation of hook_node_view().
 */

function camp_landing_node_view($node, $view_mode) {
    if($node->type == 'campaign'){
        global $base_url;
        drupal_add_css(drupal_get_path('module', 'camp_landing') . '/css/validationEngine.jquery.css');
        drupal_add_css(drupal_get_path('module', 'camp_landing') . '/css/camp_request.css');
        drupal_add_js(drupal_get_path('module', 'camp_landing') . '/js/jquery.validationEngine-en.js');
        drupal_add_js(drupal_get_path('module', 'camp_landing') . '/js/jquery.validationEngine.js');
        drupal_add_js(drupal_get_path('module', 'camp_landing') . '/js/campaign_landing_form.js');
        $item = menu_get_item();
        $path = $item['href'];
        $path = drupal_get_path_alias($path);
        $camp_type_tid = $node->field_camp_type['und'][0]['target_id'];
        $vars = array(
            'camp_form_url' => $base_url . '/' . $path,
            'camp_name' => $node->title,
            'camp_src' => $node->field_camp_src[$node->language][0]['value'],
            'camp_thank_url' => $node->field_camp_thank_url[$node->language][0]['value'],
            'camp_type' => camp_get_term_from_tid($camp_type_tid),

            'camp_phone' => $node->field_camp_phone[$node->language][0]['value'],
            'camp_offer_txt' => $node->field_camp_offer_txt[$node->language][0]['value'],
            'camp_media' => $node->field_camp_media[$node->language][0]['value'],
            'camp_term' => $node->field_camp_term[$node->language][0]['value'],
            'camp_thank_url' => $node->field_camp_thank_url[$node->language][0]['value'],

        );
        $form = drupal_get_form('campaign_landing_form', $vars);

        // Add the output to the node.
        $node->content['camp_landing'] = array(
            '#theme' => 'camp_landing_view',
            '#form' => $form,
        );
    }

}
function theme_camp_landing_view($variables){
    return drupal_render($variables['camp_landing']['#form']);
}

function camp_landing_form_alter(&$form, &$form_state, $form_id){
    global $base_url;
    if($form_id == 'campaign_node_form'){
        //debug(taxonomy_get_tree(taxonomy_get_vid_from_machine_name('campaign_types')));
        //debug($form['field_campaign_promo_main']);
        //debug(field_info_field('field_offer_link'));
        //debug(field_info_instance('node', 'field_offer_link', 'campaign'));
        $form['field_camp_website']['und'][0]['value']['#default_value'] = $base_url;
        //$form['field_camp_website']['und'][0]['value']['#parents'] = array('email');
        $form['field_camp_website']['und'][0]['value']['#attributes']['class'][] = 'utm_website';

        $form['field_camp_src']['und'][0]['value']['#attributes']['class'][] = 'urlVar';
        $form['field_camp_src']['und'][0]['value']['#attributes']['class'][] = 'utm_src';

        $form['field_camp_offer_txt']['und'][0]['value']['#attributes']['class'][] = 'urlVar';
        $form['field_camp_offer_txt']['und'][0]['value']['#attributes']['class'][] = 'utm_content';

        $form['field_camp_media']['und'][0]['value']['#attributes']['class'][] = 'urlVar';
        $form['field_camp_media']['und'][0]['value']['#attributes']['class'][] = 'utm_media';

        $form['field_camp_term']['und'][0]['value']['#attributes']['class'][] = 'urlVar';
        $form['field_camp_term']['und'][0]['value']['#attributes']['class'][] = 'utm_term';

        $form['field_gen_url']['und']['#prefix'] .= '<a href="Javascript:void(0);" class="gen_url_link">Generate url</a><br/>Campaign ID: <span class="nexid">' . arg(1) . '</span>';
        $form['field_gen_url']['und'][0]['value']['#attributes']['class'][] = 'genUrl';
    }
}

/*
 * Grab a vocabulary vid given its machine name.
 * 
 * @param $machine_name
 * The machine name of the vocabulary being searched for.
 * @return
 * The numeric $vid or false if machine name not present.
 */
function taxonomy_get_vid_from_machine_name($machine_name){
    $vid = false;
    $vocabs = taxonomy_get_vocabularies();
    foreach($vocabs as $key=>$value){
        if($value->machine_name == $machine_name){
            $vid = $value->vid;
        }
    }
    return $vid;
}
function camp_landing_preprocess_page(&$vars){
    if((arg(0) == 'node' && arg(1) == 'add' && arg(2) == 'campaign') || (arg(0) == 'node' && is_numeric(arg(1)) && arg(2) == 'edit')){
        drupal_add_js(drupal_get_path('module', 'camp_landing') . '/js/campaign_gen_url.js');

    }
}
function campaign_landing_form_pick_action($form_values){
    $action = '';
    return $action;
}
function campaign_landing_form($form, &$form_state, $vars){
    /*
     * todo: give control of required fields during campaign creation
     */

    $camp_types = _camp_types();
    $clean_camp_types = $camp_types;
    unset($clean_camp_types['Unknown']);

    if($camp_types[$vars['camp_type']] == 'commercial'){
        $top_left_img = drupal_get_path('module', 'camp_landing') . '/img/nex-bro-comm.png';
    }elseif($camp_types[$vars['camp_type']] == 'home'){
        $top_left_img = drupal_get_path('module', 'camp_landing') . '/img/nex-bro-home.png';
    }elseif($camp_types[$vars['camp_type']] == 'pro'){
        $top_left_img = drupal_get_path('module', 'camp_landing') . '/img/nex-bro-pro.png';
    }else{
        $top_left_img = drupal_get_path('module', 'camp_landing') . '/img/nex-bro-home.png';
    }
    $form['#prefix'] = '<div id="camp_request">    <div class="left">
        <div class="left-top">
        <div><img src="/' . $top_left_img . '"/></div>
        </div>
        <div class="left-bottom">
        <div><img src="/sites/all/themes/nexersystv/form/img/nex-form-bot-left.png"/></div>
        </div>
        </div>
        <div class="right">';
    $form['table_begin'] = array(
        '#markup' => t('<table id ="nexersys-form-fields">'),
    );
    //hidden form elements
    $form['camp_name'] = array(
        '#type' => 'hidden',
        '#value' => $vars['camp_name'],
    );
    $form['camp_form_url'] = array(
        '#type' => 'hidden',
        '#value' => $vars['camp_form_url'],
    );

    $form['returnURL'] = array(
        '#type' => 'hidden',
        '#value' => 'http://www.nexersys.com/thank-you',
    );

    $form['first_name'] = array(
        '#prefix' => t('<tr><td class="label">First Name*</td><td>'),
        '#type' => 'textfield',
        '#title' => 'First Name',
        '#required' => true,
        '#attributes' => array('class' => array('nexersys validate[required]'),),
        '#title_display' => 'invisible',
        '#suffix' => t('</td></tr>'),
    );
    $form['last_name'] = array(
        '#prefix' => t('<tr><td class="label">Last Name*</td><td>'),
        '#type' => 'textfield',
        '#title' => 'Last Name',
        '#required' => true,
        '#attributes' => array('class' => array('nexersys validate[required]'),),
        '#title_display' => 'invisible',
        '#suffix' => t('</td></tr>'),
    );

    if($camp_types[$vars['camp_type']] == 'commercial'){
        $form['company'] = array(
            '#prefix' => t('<tr><td class="label">Company Name*</td><td>'),
            '#type' => 'textfield',
            '#title' => 'Company Name',
            '#required' => true,
            '#attributes' => array('class' => array('nexersys validate[required]'),),
            '#title_display' => 'invisible',
            '#suffix' => t('</td></tr>'),
        );
        $form['model'] = array('#type' => 'hidden', '#default_value' => $camp_types[$vars['camp_type']]);

    }elseif($camp_types[$vars['camp_type']] == 'home'){
        $form['model'] = array('#type' => 'hidden', '#default_value' => $camp_types[$vars['camp_type']]);
    }elseif($camp_types[$vars['camp_type']] == 'pro'){
        $form['model'] = array('#type' => 'hidden', '#default_value' => $camp_types[$vars['camp_type']]);
    }else{
        //visitor has to choose, make it a select form.
        $form['model'] = array(
            '#prefix' => t('<tr><td class="label">Model Type*</td><td>'),
            '#type' => 'select',
            '#options' => $clean_camp_types,
            '#title' => 'Model Type',
            '#required' => true,
            '#attributes' => array('class' => array('nexersys validate[required]'),),
            '#title_display' => 'invisible',
            '#suffix' => t('</td></tr>'),
        );
    }
    $form['phone'] = array(
        '#prefix' => t('<tr><td class="label">Phone Number*</td><td>'),
        '#type' => 'textfield',
        '#title' => 'Phone Number',
        '#required' => true,
        '#attributes' => array('class' => array('nexersys validate[required]'),),
        '#title_display' => 'invisible',
        '#suffix' => t('</td></tr>'),
    );
    $form['email'] = array(
        '#prefix' => t('<tr><td class="label">eMail Address*</td><td>'),
        '#type' => 'textfield',
        '#title' => 'Email Address',
        '#required' => true,
        '#attributes' => array('class' => array('nexersys validate[required,custom[email]]'),),
        '#title_display' => 'invisible',
        '#suffix' => t('</td></tr>'),
    );
    $form['zip'] = array(
        '#prefix' => t('<tr><td class="label">Zip Code*</td><td>'),
        '#type' => 'textfield',
        '#title' => 'Zip Code',
        '#required' => true,
        '#attributes' => array('class' => array('nexersys validate[required]'),),
        '#title_display' => 'invisible',
        '#suffix' => t('</td></tr>'),
    );
    $form['country'] = array(
        '#prefix' => t("<tr><td class='label'>I'm Located in the*</td><td>"),
        '#type' => 'select',
        '#options' => get_country_options(),
        '#title' => 'Country',
        //'#required' => true,
        '#attributes' => array('class' => array('nexersys validate[required]'),),
        '#title_display' => 'invisible',
        '#suffix' => t('</td></tr>'),
    );
    $form['questions'] = array(
        '#prefix' => t('<tr><td class="label">Questions</td><td>'),
        '#type' => 'textarea',
        '#title' => 'Questions',
        //'#required' => false,
        '#attributes' => array('class' => array('nexersys'),),
        '#title_display' => 'invisible',
        '#resizable' => FALSE,
        '#suffix' => t('</td></tr>'),
    );
    $form['submit'] = array(
        '#prefix' => t('<tr><td></td><td colspan="2">'),
        '#type' => 'image_button',
        '#src' => drupal_get_path('module', 'camp_landing') . '/img/request-but-up.png',
        '#suffix' => t('</td></tr>'),
    );
    $form['#suffix'] = '</table></div><div id="cant-wait-container"><div class="cant-wait">Can\'t wait another second?</div>Call us toll free at <span class="camp_landing_phone"></span>,<br/>Monday thru Friday 8 to 6pm CST</div></div>';
    return $form;
}
function campaign_landing_form_submit($form, &$form_state){
    $data = camp_landing_gen_post_data($form_state['values']);
    $url = 'https://crm.zoho.com/crm/WebToLeadForm';
    $options = array(
        'method' => 'POST',
        'data' => $data,
        'timeout' => 15,
        'headers' => array('Content-Type' => 'application/x-www-form-urlencoded'),
    );
    drupal_http_request($url, $options);

    /*
     *
     x* LEADCF13=Nexersys.com+Commercial+Form
     x* &LEADCF14=http%3A%2F%2Fwww.nexersys.localhost%3A8888%2Ffitness-equipment%2Fcommercial-gym-equipment
     x* &LEADCF1=Nexersys.com+Commercial+Form
     x* &LEADCF5=http%3A%2F%2Fwww.nexersys.localhost%3A8888%2Ffitness-equipment%2Fcommercial-gym-equipment
     x* &LEADCF92=08%2F1%2F2012
     x* &LEADCF92hour=01
     x* &LEADCF92minute=30
     x* &LEADCF92ampm=PM
     x* &xnQsjsdp=f1LzxolSe-0%24
     x* &xmIwtLD=82AfV3HJwjp71g4ILMIYL*GCpUdN*P5O
     x* &actionType=TGVhZHM%3D
     x* &returnURL=http%3A%2F%2Fwww.nexersys.com%2Fthank-you
     x* &First+Name=test
     x* &Last+Name=test
     x* &Phone=1231234
     x* &Email=test%40test.com
     x* &LEADCF15=home
     x* &Zip+Code=test
     x* &LEADCF23=United+States
     x* &LEADCF28=test
     */

    drupal_goto($form_state['values']['returnURL']);
}
function camp_landing_gen_post_data($form_values){
    $data = '';
    $model = $form_values['model'];
    $country = $form_values['country'];
    $zohoCRM = 'home';
    if(($model == 'Commercial') || ($model != 'Commercial' && $country != 'United States')){
        $zohoCRM = 'commercial';
    }
    if($zohoCRM == 'commercial'){
        $data .= '&LEADCF3=' . urlencode($form_values['model']); //model
        $data .= '&LEADCF5=' . urlencode($form_values['camp_form_url']); //form url
        $data .= '&LEADCF1=' . urlencode($form_values['camp_name']); //campaign name
        $data .= '&LEADCF10=' . urlencode($form_values['questions']); //questions
        $data .= '&LEADCF11=' . urlencode($form_values['country']); //country
        $data .= !empty($form_values['company']) ? '&LEADCF24=' . urlencode($form_values['company']) : ''; //company
        $data .= '&xnQsjsdp=' . urlencode('dhOYVrEbdmJthYo*kRl79w$$');
        $data .= '&xmIwtLD=' . urlencode('xxtEl*Hx2ByNU*uyPq3OMHBogz4VdScW');


    }else{
        $data .= '&LEADCF15=' . urlencode($form_values['model']); //model
        $data .= '&LEADCF14=' . urlencode($form_values['camp_form_url']); //form url
        $data .= '&LEADCF13=' . urlencode($form_values['camp_name']); //campaign name
        $data .= '&LEADCF28='. urlencode($form_values['questions']); //questions
        $data .= '&LEADCF23='. urlencode($form_values['country']); //country
        $data .= '&xnQsjsdp='. urlencode('f1LzxolSe-0$');
        $data .= '&xmIwtLD=' . urlencode('82AfV3HJwjp71g4ILMIYL*GCpUdN*P5O');

    }
    $time = time();
    $data .= '&LEADCF92ampm=' . date('A', $time);
    $data .= '&LEADCF92hour=' . date('h', $time);
    $data .= '&LEADCF92minute=' . date('i', $time);
    $data .= '&LEADCF92=' . date('m/j/Y', $time);
    $data .= '&returnURL=' . urlencode($form_values['returnURL']);
    $data .= '&actionType=' . urlencode('TGVhZHM=');
    $data .= '&Phone=' . urlencode($form_values['phone']);
    $data .= '&First+Name=' . urlencode($form_values['first_name']);
    $data .= '&Last+Name=' . urlencode($form_values['last_name']);
    $data .= '&Email=' . urlencode($form_values['email']);
    $data .= '&Zip+Code=' . urlencode($form_values['zip']);
    $data = substr($data, 1);

    return $data;

}
function get_country_options(){
    return array(
        'United States' => 'United States',
        'United Kingdom' => 'United Kingdom',
        'Afghanistan' => 'Afghanistan',
        'Aland Islands' => 'Aland Islands',
        'Albania' => 'Albania',
        'Algeria' => 'Algeria',
        'American Samoa' => 'American Samoa',
        'Andorra' => 'Andorra',
        'Angola' => 'Angola',
        'Anguilla' => 'Anguilla',
        'Antarctica' => 'Antarctica',
        'Antigua & Barbuda' => 'Antigua & Barbuda',
        'Argentina' => 'Argentina',
        'Armenia' => 'Armenia',
        'Aruba' => 'Aruba',
        'Australia' => 'Australia',
        'Austria' => 'Austria',
        'Azerbaijan' => 'Azerbaijan',
        'Bahamas' => 'Bahamas',
        'Bahrain' => 'Bahrain',
        'Bangladesh' => 'Bangladesh',
        'Barbados' => 'Barbados',
        'Belarus' => 'Belarus',
        'Belgium' => 'Belgium',
        'Belize' => 'Belize',
        'Benin' => 'Benin',
        'Bermuda' => 'Bermuda',
        'Bhutan' => 'Bhutan',
        'Bolivia' => 'Bolivia',
        'Bosnia & Herzegovina' => 'Bosnia & Herzegovina',
        'Botswana' => 'Botswana',
        'Bouvet Island' => 'Bouvet Island',
        'Brazil' => 'Brazil',
        'British IOT' => 'British IOT',
        'Brunei Darussalam' => 'Brunei Darussalam',
        'Bulgaria' => 'Bulgaria',
        'Burkina Faso' => 'Burkina Faso',
        'Burundi' => 'Burundi',
        'Cambodia' => 'Cambodia',
        'Cameroon' => 'Cameroon',
        'Canada' => 'Canada',
        'Cape Verde' => 'Cape Verde',
        'Cayman Islands' => 'Cayman Islands',
        'Central African Republic' => 'Central African Republic',
        'Chad' => 'Chad',
        'Chile' => 'Chile',
        'China' => 'China',
        'Christmas Island' => 'Christmas Island',
        'Cocos (Keeling) Islands' => 'Cocos (Keeling) Islands',
        'Colombia' => 'Colombia',
        'Comoros' => 'Comoros',
        'Congo' => 'Congo',
        'The DR of' => 'The DR of',
        'Cook Islands' => 'Cook Islands',
        'Costa Rica' => 'Costa Rica',
        'Croatia' => 'Croatia',
        'Cuba' => 'Cuba',
        'Cyprus' => 'Cyprus',
        'Czech Republic' => 'Czech Republic',
        'Denmark' => 'Denmark',
        'Djibouti' => 'Djibouti',
        'Dominica' => 'Dominica',
        'Dominican Republic' => 'Dominican Republic',
        'Ecuador' => 'Ecuador',
        'Egypt' => 'Egypt',
        'El Salvador' => 'El Salvador',
        'Equatorial Guinea' => 'Equatorial Guinea',
        'Eritrea' => 'Eritrea',
        'Estonia' => 'Estonia',
        'Ethiopia' => 'Ethiopia',
        'Falkland Islands (Malvinas)' => 'Falkland Islands (Malvinas)',
        'Faroe Islands' => 'Faroe Islands',
        'Fiji' => 'Fiji',
        'Finland' => 'Finland',
        'France' => 'France',
        'French Guiana' => 'French Guiana',
        'French Polynesia' => 'French Polynesia',
        'French Southern Territories' => 'French Southern Territories',
        'Gabon' => 'Gabon',
        'Gambia' => 'Gambia',
        'Georgia' => 'Georgia',
        'Germany' => 'Germany',
        'Ghana' => 'Ghana',
        'Gibraltar' => 'Gibraltar',
        'Greece' => 'Greece',
        'Greenland' => 'Greenland',
        'Grenada' => 'Grenada',
        'Guadeloupe' => 'Guadeloupe',
        'Guam' => 'Guam',
        'Guatemala' => 'Guatemala',
        'Guinea' => 'Guinea',
        'Guinea-Bissau' => 'Guinea-Bissau',
        'Guyana' => 'Guyana',
        'Haiti' => 'Haiti',
        'Heard & Mcdonald Islands' => 'Heard & Mcdonald Islands',
        'Honduras' => 'Honduras',
        'Hong Kong' => 'Hong Kong',
        'Hungary' => 'Hungary',
        'Iceland' => 'Iceland',
        'India' => 'India',
        'Indonesia' => 'Indonesia',
        'Iran' => 'Iran',
        'Iraq' => 'Iraq',
        'Ireland' => 'Ireland',
        'Israel' => 'Israel',
        'Italy' => 'Italy',
        'Jamaica' => 'Jamaica',
        'Japan' => 'Japan',
        'Jordan' => 'Jordan',
        'Kazakhstan' => 'Kazakhstan',
        'Kenya' => 'Kenya',
        'Kiribati' => 'Kiribati',
        'Korea' => 'Korea',
        'DPR of' => 'DPR of',
        'Kuwait' => 'Kuwait',
        'Kyrgyzstan' => 'Kyrgyzstan',
        'Lao PDR' => 'Lao PDR',
        'Latvia' => 'Latvia',
        'Lebanon' => 'Lebanon',
        'Lesotho' => 'Lesotho',
        'Liberia' => 'Liberia',
        'Libyan Arab Jamahiriya' => 'Libyan Arab Jamahiriya',
        'Liechtenstein' => 'Liechtenstein',
        'Lithuania' => 'Lithuania',
        'Luxembourg' => 'Luxembourg',
        'Macao' => 'Macao',
        'Macedonia' => 'Macedonia',
        'Madagascar' => 'Madagascar',
        'Malawi' => 'Malawi',
        'Malaysia' => 'Malaysia',
        'Maldives' => 'Maldives',
        'Mali' => 'Mali',
        'Malta' => 'Malta',
        'Marshall Islands' => 'Marshall Islands',
        'Martinique' => 'Martinique',
        'Mauritania' => 'Mauritania',
        'Mauritius' => 'Mauritius',
        'Mayotte' => 'Mayotte',
        'Mexico' => 'Mexico',
        'Micronesia' => 'Micronesia',
        'Moldova' => 'Moldova',
        'Monaco' => 'Monaco',
        'Mongolia' => 'Mongolia',
        'Montserrat' => 'Montserrat',
        'Morocco' => 'Morocco',
        'Mozambique' => 'Mozambique',
        'Myanmar' => 'Myanmar',
        'Namibia' => 'Namibia',
        'Nauru' => 'Nauru',
        'Nepal' => 'Nepal',
        'Netherlands' => 'Netherlands',
        'Netherlands Antilles' => 'Netherlands Antilles',
        'New Caledonia' => 'New Caledonia',
        'New Zealand' => 'New Zealand',
        'Nicaragua' => 'Nicaragua',
        'Niger' => 'Niger',
        'Nigeria' => 'Nigeria',
        'Niue' => 'Niue',
        'Norfolk Island' => 'Norfolk Island',
        'Northern Mariana Islands' => 'Northern Mariana Islands',
        'Norway' => 'Norway',
        'Oman' => 'Oman',
        'Pakistan' => 'Pakistan',
        'Palau' => 'Palau',
        'Palestinian Territory' => 'Palestinian Territory',
        'Panama' => 'Panama',
        'Papua New Guinea' => 'Papua New Guinea',
        'Paraguay' => 'Paraguay',
        'Peru' => 'Peru',
        'Philippines' => 'Philippines',
        'Pitcairn' => 'Pitcairn',
        'Poland' => 'Poland',
        'Portugal' => 'Portugal',
        'Puerto Rico' => 'Puerto Rico',
        'Qatar' => 'Qatar',
        'Réunion' => 'Réunion',
        'Romania' => 'Romania',
        'Russian Federation' => 'Russian Federation',
        'Rwanda' => 'Rwanda',
        'Saint Helena' => 'Saint Helena',
        'Saint Kitts & Nevis' => 'Saint Kitts & Nevis',
        'Saint Lucia' => 'Saint Lucia',
        'Saint Pierre & Miquelon' => 'Saint Pierre & Miquelon',
        'Saint Vincent & The Grenadines' => 'Saint Vincent & The Grenadines',
        'Samoa' => 'Samoa',
        'San Marino' => 'San Marino',
        'Sao Tome & Principe' => 'Sao Tome & Principe',
        'Saudi Arabia' => 'Saudi Arabia',
        'Scotland' => 'Scotland',
        'Senegal' => 'Senegal',
        'Serbia & Montenegro' => 'Serbia & Montenegro',
        'Seychelles' => 'Seychelles',
        'Sierra Leone' => 'Sierra Leone',
        'Singapore' => 'Singapore',
        'Slovakia' => 'Slovakia',
        'Slovenia' => 'Slovenia',
        'Solomon Islands' => 'Solomon Islands',
        'Somalia' => 'Somalia',
        'South Africa' => 'South Africa',
        'South Georgia & The SSI' => 'South Georgia & The SSI',
        'Spain' => 'Spain',
        'Sri Lanka' => 'Sri Lanka',
        'Sudan' => 'Sudan',
        'Suriname' => 'Suriname',
        'Svalbard & Jan Mayen' => 'Svalbard & Jan Mayen',
        'Swaziland' => 'Swaziland',
        'Sweden' => 'Sweden',
        'Switzerland' => 'Switzerland',
        'Syrian Arab Republic' => 'Syrian Arab Republic',
        'Taiwan' => 'Taiwan',
        'Tajikistan' => 'Tajikistan',
        'Tanzania' => 'Tanzania',
        'Thailand' => 'Thailand',
        'Timor-Leste' => 'Timor-Leste',
        'Togo' => 'Togo',
        'Tokelau' => 'Tokelau',
        'Tonga' => 'Tonga',
        'Trinidad & Tobago' => 'Trinidad & Tobago',
        'Tunisia' => 'Tunisia',
        'Turkey' => 'Turkey',
        'Turkmenistan' => 'Turkmenistan',
        'Turks & Caicos Islands' => 'Turks & Caicos Islands',
        'Tuvalu' => 'Tuvalu',
        'Uganda' => 'Uganda',
        'Ukraine' => 'Ukraine',
        'United Arab Emirates' => 'United Arab Emirates',
        'Uruguay' => 'Uruguay',
        'Uzbekistan' => 'Uzbekistan',
        'Vanuatu' => 'Vanuatu',
        'Vatican City State' => 'Vatican City State',
        'Venezuela' => 'Venezuela',
        'Vietnam' => 'Vietnam',
        'Virgin Islands' => 'Virgin Islands',
        'British' => 'British',
        'U.S.' => 'U.S.',
        'Wallis & Futuna' => 'Wallis & Futuna',
        'Western Sahara' => 'Western Sahara',
        'Yemen' => 'Yemen',
        'Zambia' => 'Zambia',
        'Zimbabwe' => 'Zimbabwe',
    );
}